#!/usr/bin/perl
#
# Name: RA_compare_with_reference.pl
# Version: 1.04
# Date: 01/06/05 
# Author: Michael E. Zwick
#-------------------------------------------------------------------------------
# Program designed to compare a single reference.chip.fasta file to one or more
# fasta files generated by a resequencing array (RA) experiment. 
# The reference.chip.fasta file is generated from a high-quality (or at least 
# quality known) genbank reference sequence.
# The .fasta files are generated from RATools.#
#-------------------------------------------------------------------------------
use strict;
use warnings;
use Cwd;

my(@experimental_files, @reference_file, @ref_seq, $exp_file_number, $ref_file_number, $reference_seq, $reference_seq_size, @ref_compare, $experiment_sequence, $experiment_sequence_size, @experiment_compare, $bases_identical, $bases_different, $total_bases, $bases_called_N, $check_total, $chip_reference_sequence, $chip_reference_sequence_size);

# Define local variables for localtime function
my($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst);

# Initialize variables
#-------------------------------------------------------------------------------
$total_bases = 0;
$bases_identical = 0;
$bases_called_N = 0;
$bases_different = 0;
$check_total = 0;

#-------------------------------------------------------------------------------
# Get the name of the reference chip file
# Get the name of all the experimental files

# Read reference sequences into an array
# Throw out the fasta header sequences
# Generate a single string - put into an array for comparison

# Loop over experimental filkes
# Read experimental files into arrays one at a time
# Perform comparison with .reference.chip file
# Count number of bases that are N, identical, different

#-------------------------------------------------------------------------------
# Obtain the name of reference chip file
# File needs to end in .ref.fasta
# There should be only one reference chip file
#-------------------------------------------------------------------------------
@reference_file = glob("*.ref.fasta");
$ref_file_number = ($#reference_file + 1);

print "Loaded $ref_file_number reference file\n";
if (($ref_file_number == 0) || ($ref_file_number > 1)) {
	die "$ref_file_number reference files detected.\n
		Check directory. Exiting program";
}

#-------------------------------------------------------------------------------
# Obtain the names of the experimental files
#-------------------------------------------------------------------------------
@experimental_files = glob("*.final.fasta");
$exp_file_number = ($#experimental_files + 1);

print "Processing a total of $exp_file_number experimental files\n\n";
if ($exp_file_number == 0) {
	die "$exp_file_number .fasta files detected.\n
		Check directory. Exiting program";
}

#---------------------------------------------------------------------------
# Open output file: discrepancy Count
#---------------------------------------------------------------------------
open(OUT_DISCREPANCIES, ">", "discrepancy.count") 
	or die "Cannot open OUT_FASTA for data output";

#-------------------------------------------------------------------------------
# Process reference chip file to generate single DNA sequence file
# Read file in line by line, discard fasta header
# Remove spaces, put string into array called @ref_seq
#-------------------------------------------------------------------------------
foreach my $ref_chip_file (@reference_file) {

	open(FILEHANDLE_FIRST, $ref_chip_file)
		or die "Cannot open FILEHANDLE_FIRST";

	while (<FILEHANDLE_FIRST>) {
		if ($_ =~ /^>/) {
			next;
		}
		else {
			$reference_seq .= $_;
		}
	}	
	close FILEHANDLE_FIRST;
	$reference_seq =~ s/\s//g;
	@ref_seq = split( '', $reference_seq);
	$reference_seq_size = ($#ref_seq + 1);
	print OUT_DISCREPANCIES "Size of chip reference sequence: $reference_seq_size\n";
	print "Size of chip reference sequence $reference_seq_size\n";
	#print "\n";
	#print "$reference_seq\n";
}

#-------------------------------------------------------------------------------
# Process each experimental file, generate an array, compare to reference 
# sequence, count differences
#-------------------------------------------------------------------------------
foreach my $exp_files (@experimental_files) {

	open(FILEHANDLE_SECOND, $exp_files)
		or die "Cannot open FILEHANDLE_SECOND";

	while (<FILEHANDLE_SECOND>) {
		if ($_ =~ /^>/) {
			next;
		}	
		else {
			$experiment_sequence .= $_;
		}
	}
	close FILEHANDLE_SECOND;
	$experiment_sequence =~ s/\s//g;
	@experiment_compare = split( '', $experiment_sequence);
	$experiment_sequence_size = ($#experiment_compare + 1);
	#print OUT_DISCREPANCIES "Size of experimental sequence is $experiment_sequence_size\n";
	print "Size of experimental sequence, $exp_files, is $experiment_sequence_size\n";
	
	if ($reference_seq_size != $experiment_sequence_size) {
		print "File size error between $exp_files and reference file\n";
	}


	#---------------------------------------------------------------------------
	# Perform file comparison at all chars in arrays @ref_seq and @experiment_compare.
	#---------------------------------------------------------------------------
	print OUT_DISCREPANCIES "\n";
	print OUT_DISCREPANCIES "$exp_files\n";
	print OUT_DISCREPANCIES "$experiment_sequence_size\n";
	print OUT_DISCREPANCIES "$reference_seq_size\n";
	
	for (my $j = 0; $j < $reference_seq_size; $j++) {
		$total_bases++;

		# Count bases not called in experiment
		if ($experiment_compare[$j] eq "N") {
			$bases_called_N++;
		}
		# Count bases called and identical
		elsif ($experiment_compare[$j] eq $ref_seq[$j]) {
			$bases_identical++;
		}
		# Count discrepancies
		else {
			print OUT_DISCREPANCIES " Discrepancy at position $j\t Chip call: $experiment_compare[$j], Ref seq: $ref_seq[$j]\n";
			$bases_different++;
			}
	}

	#---------------------------------------------------------------------------
	# Reset values of variables - array containing experimental sequence,
	# variable containing experimental sequence string, experimental sequence
	# size
	#---------------------------------------------------------------------------
	@experiment_compare = ();
	$experiment_sequence = '';
	$experiment_sequence_size = 0;
	
	$check_total = ($bases_identical + $bases_different + $bases_called_N);
	#Summary Statistics
	print OUT_DISCREPANCIES "Number of bases called N: $bases_called_N\n";
	print OUT_DISCREPANCIES "Number of based called identically: $bases_identical\n";
	print OUT_DISCREPANCIES "Number of discrepant bases: $bases_different\n";
	print OUT_DISCREPANCIES "Total Bases this chip: $check_total\n";

	if ($reference_seq_size != $check_total) {
	print OUT_DISCREPANCIES "Warning. Reference bases, $reference_seq_size, does not match $check_total\n";
	print "Warning. Reference bases, $reference_seq_size, does not match $check_total\n\n";
	}

	#Reset Variables
	$bases_called_N = 0;
	$bases_identical = 0;
	$bases_different = 0;
}

print OUT_DISCREPANCIES "\n";
print OUT_DISCREPANCIES "The total number of bases is $total_bases\n";
print OUT_DISCREPANCIES "The total number of bases (check value) is $check_total\n";
close OUT_DISCREPANCIES;
print "Completed ra_compare_with_ref.pl program.\n";
