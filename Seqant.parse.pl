#!/usr/bin/perl
#
# Name: Seqant.parse.pl
# Version: 1.0
# Date: 8/13/2011
################################################################################
# The purpose of this script is to parse the unique variant SEQANT output and
# the complete variant file to identify all unique variants for given samples.
# This should process all functional classes of identified SNVs and indels. 
################################################################################
#use warnings;
use strict;
use Cwd;

# Local variable definitions
################################################################################
my (@sampleIDs, %sampleIDsOut, $sample_count, @unique_names, @unique_positions, $unique_positions_nmbr, %unique_annotation, @seqant_names, $default_seqant_files, @seqant_file, $seqant_file_nmbr, $count, $dataPath,
@unique_file, $unique_file_nmbr, @unique_split, $i, @seqant_hom_SampleID, @seqant_het_SampleID, $seqant_hom_SampleID_nmbr, $seqant_het_SampleID_nmbr, @seqant_split);

# Initialize variable values
################################################################################
# Define number of seqant file types
$default_seqant_files = 8;
$sample_count = 0;
$count = 0;

#Names of Variation Files, found in directory - Unique_Variations
@unique_names = qw(unique.replacement.snp.txt unique.silent.snp.txt unique.utr.snp.txt 
unique.intronic.snp.txt unique.intergenic.snp.txt unique.exonic.indel.txt unique.utr.indel.txt
unique.intronic.indel.txt unique.intergenic.indel.txt);

#Names of SeqAnt All Files, found in main directory - ARGV
@seqant_names = qw(Exonic.Replacement.SNP.Annotation. Exonic.Silent.SNP.Annotation. UTR.SNP.Annotation.
Intronic.SNP.Annotation. Intergenic.SNP.Annotation. Exonic.Indel.Annotation UTR.Indel.Annotation. 
Intronic.Indel.Annotation. Intergenic.Indel.Annotation.);

# Perform directory functions
####################################################################################################
# Test if user included directory name when starting program
if(@ARGV != 1)
{
	die "\n Usage: Seqant.parse.pl <target directory> \n";
}
# Change to user provided directory containing data files
chdir "$ARGV[0]";
$dataPath = getcwd();
mkdir "$dataPath/Samples/";

####################################################################################################
# Sample output files
# Get samples IDs from SampleIDs.txt
# Make six output file handles
# These files will collect data for each sample analyzed
# Remain open until the end of the program
####################################################################################################
open (IN_SAMPLE_ID, "<", "SampleID.txt") or die "Cannot open IN_SAMPLE_ID filehandle to read file";

while (<IN_SAMPLE_ID>) {
	chomp $_;
	#Push six file names onto array
	push(@sampleIDs, $_);
	$sampleIDsOut{$_} = ('OUTFILE_' . "$sample_count");
	$sample_count++;
}
close(IN_SAMPLE_ID);

chdir "$dataPath/Samples/";
open (OUTFILE_0, ">", ("$sampleIDs[0]" . ".txt"));
open (OUTFILE_1, ">", ("$sampleIDs[1]" . ".txt"));
open (OUTFILE_2, ">", ("$sampleIDs[2]" . ".txt"));
open (OUTFILE_3, ">", ("$sampleIDs[3]" . ".txt"));
open (OUTFILE_4, ">", ("$sampleIDs[4]" . ".txt"));
open (OUTFILE_5, ">", ("$sampleIDs[5]" . ".txt"));

####################################################################################################
# Extract data from unique variant and SeqAnt all variant files
# Loop over each variant functional class of files generated by SeqAnt (with $count)
# Call Process_Unique_File
# Determines unique positions for variants identified
# Determine number of unique positions
# Change directory back to original $dataPath
# Call Process_SeqAnt_File
####################################################################################################
print OUTFILE_0 "Chromosome\tPosition\tRegion\tGene\tVarType\tCommon_to\tdbSNP ID\tGenotype\n";
print OUTFILE_1 "Chromosome\tPosition\tRegion\tGene\tVarType\tCommon_to\tdbSNP ID\tGenotype\n";
print OUTFILE_2 "Chromosome\tPosition\tRegion\tGene\tVarType\tCommon_to\tdbSNP ID\tGenotype\n";
print OUTFILE_3 "Chromosome\tPosition\tRegion\tGene\tVarType\tCommon_to\tdbSNP ID\tGenotype\n";
print OUTFILE_4 "Chromosome\tPosition\tRegion\tGene\tVarType\tCommon_to\tdbSNP ID\tGenotype\n";
print OUTFILE_5 "Chromosome\tPosition\tRegion\tGene\tVarType\tCommon_to\tdbSNP ID\tGenotype\n";
print "Finished printing headers\n";

for ($count = 0; $count < $default_seqant_files; $count++) {
	Process_Unique_File($dataPath, $unique_names[$count]);
	
	$unique_positions_nmbr = ($#unique_positions + 1);
	print "Number of unique positions in above file: $unique_positions_nmbr\n\n";
	chdir "$dataPath";
	
	####################################################################################################
	# Call Process_SeqAnt_File
	# Loop over positions in @unique_positions array
	# $dataPath - path to directory with seqant files
	# $seqant_names[$count] - name of seqant file
	# $unique_positions[$i] - position of variant
	####################################################################################################
	for ($i = 0; $i < $unique_positions_nmbr; $i++) {
	#print "Current unique positions is $unique_positions[$i]\n";
	Process_SeqAnt_File($dataPath, $seqant_names[$count], $unique_positions[$i]);
	}
	
	#Debug code
	#print "Preparing to exit - debug\n";
	#if ($count == 1) {exit;}
	# Reset values
	@unique_positions = "";
	$unique_positions_nmbr = 0;
}

close (OUTFILE_0);
close (OUTFILE_1);
close (OUTFILE_2);
close (OUTFILE_3);
close (OUTFILE_4);
close (OUTFILE_5);

####################################################################################################
####################################################################################################
### Subroutines
####################################################################################################
####################################################################################################


####################################################################################################
# Subroutine to process the Unique_Variations File
# Makes global array @unique_positions that contains positions of unique variants
# Makes global hash %unique_annotation that uses positions as key, contains a line of annotation information
# $_[0] - contains path to data directory
# $_[1] - contains name of unique variant file
# Change to directory Unique_Variations and glob file name
# Process each globbed file to obtain all the unique positions
# Open file to be read
# Add the positions to array @unique_positions
# Open file to be read: $unique_file[0]
####################################################################################################
sub Process_Unique_File {
	#print "subroutine Process_Unique_File\n";
	#print "Entered the Process_Unique_File subroutine with arguments: $_[0] , $_[1]\n";
	chdir "$_[0]/Unique_Variations/";
	@unique_file = glob "*.$_[1]" || print "\nNo unique $_[1] variant file found\n";
	$unique_file_nmbr = ($#unique_file + 1);
	#print "Processing $unique_file_nmbr file.\n";
	#print "Name of globbed file is: $unique_file[0]\n";
	open (IN_FILE, "<", "$unique_file[0]") or die "Cannot open IN_FILE filehandle to read file";
	
	while (<IN_FILE>) {
		chomp $_;
		# Ignore lines that being with "Chromosome" - header
		if (/^Chromosome/) {next;}
		# Split the line
		# Push the second value into an array named @unique_position
		@unique_split = split('\t', $_);
		push(@unique_positions, $unique_split[1]);
		
		# Make hash key position, contains line of info
		$unique_annotation{$unique_split[1]} = $_;
	}
		close IN_FILE;
		
	# Reset @unique_file array
	@unique_file = "";
}

####################################################################################################
# Subroutine to process the SeqAnt File
# Glob the file name to
# $_[0] - path to files
# $_[1] - unique part (functional class) of seqant file Name
# $_[2] - position of variant from unique file
####################################################################################################
sub Process_SeqAnt_File {
	#print "Entered the Process_SeqAnt_File subroutine with arguments $_[0] $_[1] $_[2]\n";
	
	#if ($_[2] == 38691324) {
	#	print "Found the variant 38691324\n";
	#}
	
	@seqant_file = glob "$_[1]*" || print "\nNo seqant $_[1] variant file found\n";
	$seqant_file_nmbr = ($#seqant_file + 1);
	#print "Processing $seqant_file_nmbr seqant file\n";
	#print "Name of globbed file is: $seqant_file[0]\n";
	#chdir "$_[0]";
	# Open $seqant_file
	open (IN_SEQANT_FILE, "<", "$seqant_file[0]") or die "Cannot open IN_SEQANT_FILE filehandle to read file";
	
	
	# Read by line
	####################################################################################################
	while(<IN_SEQANT_FILE>) {
		#print "Entered into while loop\n";
		chomp $_;
		#print "Seqant line read is $_\n";
		# Remove header
		######################################################
		if (/^Chromosome/) {
			#print "Found the header\n";
			#print "$_\n";
			next;
		}
		
		#Split the line
		@seqant_split = split('\t', $_);
		#print "Matching position $seqant_split[1] with position $_[2]\n";;
		#print "Value of seqant_split[1] is $seqant_split[1]\n";
		#print "Value of _[2] is $_[2]\n";
		
		#if ($_[2] == 38691324) {
		#	print "Found the variant 38691324\n";
		#	print "Matching position $seqant_split[1] with position $_[2]\n";;
		#	print "Value of seqant_split[1] is $seqant_split[1]\n";
		#	print "Value of _[2] is $_[2]\n";
		#}
		
		
		#Start debugging here - what are the values shown above!!!
		
		
		# No match
		######################################################
		if($seqant_split[1] ne $_[2]) { 
			#print "Did not find a match\n";
			next;
		}
		
		
		# Successful match
		######################################################
		if($seqant_split[1] eq $_[2]) {
			#print "Found a match\n";
			
			# Identify homozygous sampleIDs in seqant file
			@seqant_hom_SampleID = split(',', $seqant_split[20]);
			$seqant_hom_SampleID_nmbr = ($#seqant_hom_SampleID + 1);
			
			# Identify heterozygous sampleIDs in seqant file
			@seqant_het_SampleID = split(',', $seqant_split[22]);
			$seqant_het_SampleID_nmbr = ($#seqant_het_SampleID + 1);
			
			#if ($_[2] == 38691324) {
			#	print "Found $seqant_hom_SampleID_nmbr homozygous sample(s) with this variant\n";
			#	print "@seqant_hom_SampleID\n";
			#	print "Found $seqant_het_SampleID_nmbr heterozygous sample(s) with this variant\n";
			#	print "@seqant_het_SampleID\n";
			#}
			
			#Homozygous SNVs
			for(my $h = 0; $h < $seqant_hom_SampleID_nmbr; $h++) {
				if ($seqant_hom_SampleID[$h] eq $sampleIDs[0]) {
					print OUTFILE_0 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHom\n";
					#print "print OUTFILE_0\n";
				}
				if ($seqant_hom_SampleID[$h] eq $sampleIDs[1]) {
					print OUTFILE_1 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHom\n";
					#print "print OUTFILE_1\n";
				}
				if ($seqant_hom_SampleID[$h] eq $sampleIDs[2]) {
					print OUTFILE_2 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHom\n";
					#print "print OUTFILE_2\n";
				}
				if ($seqant_hom_SampleID[$h] eq $sampleIDs[3]) {
					print OUTFILE_3 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHom\n";
					#print "print OUTFILE_3\n";
				}
				if ($seqant_hom_SampleID[$h] eq $sampleIDs[4]) {
					print OUTFILE_4 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHom\n";
					#print "print OUTFILE_4\n";
				}
				if ($seqant_hom_SampleID[$h] eq $sampleIDs[5]) {
					print OUTFILE_5 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHom\n";
					#print "print OUTFILE_5\n";
				} 
			}
			#Heterozygous SNVs
			for(my $k = 0; $k < $seqant_het_SampleID_nmbr; $k++) {
				if ($seqant_het_SampleID[$k] eq $sampleIDs[0]) {
					print OUTFILE_0 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHet\n";
					#print "print OUTFILE_0\n";
				}
				if ($seqant_het_SampleID[$k] eq $sampleIDs[1]) {
					print OUTFILE_1 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHet\n";
					#print "print OUTFILE_1\n";
				}
				if ($seqant_het_SampleID[$k] eq $sampleIDs[2]) {
					print OUTFILE_2 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHet\n";
					#print "print OUTFILE_2\n";
				}
				if ($seqant_het_SampleID[$k] eq $sampleIDs[3]) {
					print OUTFILE_3 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHet\n";
					#print "print OUTFILE_3\n";
				}
				if ($seqant_het_SampleID[$k] eq $sampleIDs[4]) {
					print OUTFILE_4 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHet\n";
					#print "print OUTFILE_4\n";
				}
				if ($seqant_het_SampleID[$k] eq $sampleIDs[5]) {
					print OUTFILE_5 "$unique_annotation{$_[2]}\t$seqant_split[13]\tHet\n";
					#print "print OUTFILE_5\n";
				} 
			}
				# Only get first entry for a given unique variant
				last;
		}
	}
		close(IN_SEQANT_FILE);
		@seqant_hom_SampleID = "";
		@seqant_het_SampleID = "";
		# Get out of function Process_SeqAnt_File and choose next unique position
		next;
}
